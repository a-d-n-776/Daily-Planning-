https://www.howtogeek.com/529219/how-to-parse-json-files-on-the-linux-command-line-with-jq/
https://jqplay.org/

yum install jq -y
yum install curl -y
-------------------------------------------------------------------------------------------------------------------------------------------
How to Make JSON Readable::::::::--------------

curl -s http://api.open-notify.org/iss-now.json
[root@ip-10-0-0-143 folder1]# curl -s http://api.open-notify.org/iss-now.json
{"message": "success", "iss_position": {"latitude": "-48.3007", "longitude": "22.2671"}, "timestamp": 1614791448}


#jq uses filters to parse JSON, and the simplest of these filters is a period (.), which means “print the entire object.” By default, jq pretty-prints the output.
# http://api.open-notify.org/iss-now.json

curl -s http://api.open-notify.org/iss-now.json | jq .
[root@ip-10-0-0-143 folder1]# ccurl -s http://api.open-notify.org/iss-now.json | jq .
{
  "message": "success",
  "iss_position": {
    "latitude": "-45.4817",
    "longitude": "30.9030"
  },
  "timestamp": 1614791554
}

#####-

[root@ip-10-0-0-143 folder1]# curl -s http://api.open-notify.org/iss-now.json | jq . > iss.json
[root@ip-10-0-0-143 folder1]# cat iss.json
{
  "message": "success",
  "iss_position": {
    "latitude": "-21.5669",
    "longitude": "63.8411"
  },
  "timestamp": 1614792135
}

#########------
------------------------------------------------------------------------------------------------------------------------------------------------
Accessing Data Values:::-
As we saw above, jq can extract data values being piped through from JSON. It can also work with JSON stored in a file.
We’re going to work with local files so the command line isn’t cluttered with curl commands. This should make it a bit easier to follow.
jq .message iss.json

[root@ip-10-0-0-143 folder1]# jq .message iss.json
"success"

[root@ip-10-0-0-143 folder1]# jq .timestamp iss.json
1614792135

[root@ip-10-0-0-143 folder1]# jq .iss_position.latitude iss.json
"-21.5669"

#To extract multiple values, you have to do the following:

List the key names on the command line.
Separate them with commas (,).
Enclose them in quotation marks (") or apostrophes (').

[root@ip-10-0-0-143 folder1]# jq ".iss_position.latitude, .timestamp" iss.json
"-21.5669"
1614792135
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Working with Arrays::::::::::::;-------------------

Let’s grab a different JSON object from NASA.
This time, we’ll use a list of the astronauts who are in space right now:
curl -s http://api.open-notify.org/astros.json
curl -s http://api.open-notify.org/astros.json | jq .
[root@ip-10-0-0-143 folder1]# curl -s http://api.open-notify.org/astros.json | jq .
{
  "message": "success",
  "number": 7,
  "people": [
    {
      "craft": "ISS",
      "name": "Sergey Ryzhikov"
    },
    {
      "craft": "ISS",
      "name": "Kate Rubins"
    },
    {
      "craft": "ISS",
      "name": "Sergey Kud-Sverchkov"
    },
    {
      "craft": "ISS",
      "name": "Mike Hopkins"
    },
    {
      "craft": "ISS",
      "name": "Victor Glover"
    },
    {
      "craft": "ISS",
      "name": "Shannon Walker"
    },
    {
      "craft": "ISS",
      "name": "Soichi Noguchi"
    }
  ]
}

curl -s http://api.open-notify.org/astros.json | jq . > astro.json

#Now let’s type the following to check our file:

less astro.json
q or Q or :q or :Q or ZZ	Exits less.

we  use the JSON dot notation to access the values. We must also include the brackets ([]) in the name of the array

[root@ip-10-0-0-143 folder1]# jq ".people[].name" astro.json
"Sergey Ryzhikov"
"Kate Rubins"
"Sergey Kud-Sverchkov"
"Mike Hopkins"
"Victor Glover"
"Shannon Walker"
"Soichi Noguchi"

jq ".people[].craft" astro.json
[root@ip-10-0-0-143 folder1]# jq ".people[].craft" astro.json
"ISS"
"ISS"
"ISS"
"ISS"
"ISS"
"ISS"
"ISS"

The following number of objects are in this array::-

[root@ip-10-0-0-143 folder1]# jq ".people[1].name" astro.json
"Kate Rubins"
[root@ip-10-0-0-143 folder1]# jq ".people[3].name" astro.json
"Mike Hopkins"
[root@ip-10-0-0-143 folder1]# jq ".people[-1].name" astro.json
"Soichi Noguchi"
[root@ip-10-0-0-143 folder1]# jq ".people[-2].name" astro.json
"Shannon Walker"

You can also provide a start and end object within the array. This is called “slicing,” and it can be a little confusing. Remember the array uses a zero-offset.

To retrieve the objects from index position two, up to (but not including) the object at index position four, we type the following command:

[root@ip-10-0-0-143 folder1]# jq ".people[2:4]" astro.json
[
  {
    "craft": "ISS",
    "name": "Sergey Kud-Sverchkov"
  },
  {
    "craft": "ISS",
    "name": "Mike Hopkins"
  }
]

################
------------------------------------------------------------------------------------------------------------------------------------------------
How to Use Pipes with Filters::::::::----

You can pipe the output from one filter to another, and you don’t have to learn a new symbol. The same as the Linux command line, jq uses the vertical bar (|) to represent a pipe.
We’ll tell jq to pipe the people array into the .name filter, which should list the names of the astronauts in the terminal window.

[root@ip-10-0-0-143 folder1]# jq ".people[] | .name" astro.json
"Sergey Ryzhikov"
"Kate Rubins"
"Sergey Kud-Sverchkov"
"Mike Hopkins"
"Victor Glover"
"Shannon Walker"
"Soichi Noguchi"

--------------------------------------------------------------------------------------------------------------------------------------
Creating Arrays and Modifying Results:

curl -s http://api.open-notify.org/iss-now.json | jq . > iss.json

[root@ip-10-0-0-143 folder1]# jq . iss.json
{
  "message": "success",
  "iss_position": {
    "latitude": "17.4337",
    "longitude": "-124.4649"
  },
  "timestamp": 1614795003
}

##
We can use jq‘s delete function, del(), to delete a key:value pair. To delete the message key:value pair, we type this command:
[root@ip-10-0-0-143 folder1]# jq "del(.message)" iss.json
{
  "iss_position": {
    "latitude": "17.4337",
    "longitude": "-124.4649"
  },
  "timestamp": 1614795003
}

##IMP: Abou--: Note this doesn’t actually delete it from the “iss.json” file; it just removes it from the output of the command.
If you need to create a new file without the message key:value pair in it, run the command, and then redirect the output into a new file.

-------------------------------------------------------------------------------------------------------------------------------------------------------

More Complicated JSON Objects:::::-----------

This is a bigger file with a far more complicated JSON structure than those we’ve dealt with previously.
curl -s https://data.nasa.gov/resource/y77d-th95.json | jq . > strikes.json
less strikes.json     # to exit q

[
  {
    "name": "Aachen",
    "id": "1",
    "nametype": "Valid",
    "recclass": "L5",
    "mass": "21",
    "fall": "Fell",
    "year": "1880-01-01T00:00:00.000",
    "reclat": "50.775000",
    "reclong": "6.083330",
    "geolocation": {
      "type": "Point",
      "coordinates": [
        6.08333,
        50.775
      ]
    }
  },

    
As shown above, the file begins with an opening bracket ([), so the entire object is an array.
The objects in the array are collections of key:value pairs, and there’s a nested object called geolocation.
The geolocation object contains further key:value pairs, and an array called coordinates.

Let’s retrieve the names of the meteor strikes from the object at index position 995 through the end of the array.
We’ll type the following to pipe the JSON through three filters:
[root@ip-10-0-0-143 folder1]# jq ".[995:] | .[] | .name" strikes.json
"Tirupati"
"Tissint"
"Tjabe"
"Tjerebon"
"Tomakovka"

#The filters function in the following ways:
.[995:]: This tells jq to process the objects from array index 995 through the end of the array. No number after the colon ( : ) is what tells jq to continue to the end of the array.
.[]: This array iterator tells jq to process each object in the array.
.name: This filter extracts the name value.

#With a slight change, we can extract the last 10 objects from the array. A “-10” instructs jq to start processing objects 10 back from the end of the array.
We type the following:
jq ".[-10:] | .[] | .name" strikes.json
[root@ip-10-0-0-143 folder1]# jq ".[-10:] | .[] | .name" strikes.json
"Tianzhang"
"Tieschitz"
"Tilden"
"Tillaberi"
"Timochin"
"Tirupati"
"Tissint"
"Tjabe"
"Tjerebon"
"Tomakovka"

#select a single object:
jq ".[650].name" strikes.json

#We can also apply slicing to strings. To do so, we’ll type the following to request the first four characters of the name of the object at array index 234:
jq ".[234].name[0:4]" strikes.json
[root@ip-10-0-0-143 folder1]# jq ".[234].name[0:4]" strikes.json
"Derg"

# specific object in its entirety.
[root@ip-10-0-0-143 folder1]# jq ".[234]" strikes.json
{
  "name": "Dergaon",
  "id": "6664",
  "nametype": "Valid",
  "recclass": "H5",
  "mass": "12500",
  "fall": "Fell",
  "year": "2001-01-01T00:00:00.000",
  "reclat": "26.683330",
  "reclong": "93.866670",
  "geolocation": {
    "type": "Point",
    "coordinates": [
      93.86667,
      26.68333
    ]
  }
}
[root@ip-10-0-0-143 folder1]#

# see only the values
[root@ip-10-0-0-143 folder1]# jq ".[234][]" strikes.json
"Dergaon"
"6664"
"Valid"
"H5"
"12500"
"Fell"
"2001-01-01T00:00:00.000"
"26.683330"
"93.866670"
{
  "type": "Point",
  "coordinates": [
    93.86667,
    26.68333
  ]
}
[root@ip-10-0-0-143 folder1]#

#To retrieve multiple values from each object, we separate them with commas in the following command:
jq ".[450:455] | .[] | .name, .mass" strikes.json

#To see the coordinates values for the object at index position 121 of the array, we type the following command:

[root@ip-10-0-0-143 folder1]# jq ".[121].geolocation.coordinates[]" strikes.json
25.8
60.4
[root@ip-10-0-0-143 folder1]# jq ".[121]" strikes.json
{
  "name": "Bjurböle",
  "id": "5064",
  "nametype": "Valid",
  "recclass": "L/LL4",
  "mass": "330000",
  "fall": "Fell",
  "year": "1899-01-01T00:00:00.000",
  "reclat": "60.400000",
  "reclong": "25.800000",
  "geolocation": {
    "type": "Point",
    "coordinates": [
      25.8,
      60.4
    ]
  }
}
[root@ip-10-0-0-143 folder1]#

-------------------------------------------------------------------------------------------------------------------------------

The length Function:::::::--------


#The jq length function gives different metrics according to what it’s been applied, such as:
Strings: The length of the string in bytes.
Objects: The number of key:value pairs in the object.
Arrays: The number of array elements in the array.
The following command returns the length of the name value in 10 of the objects in the JSON array, starting at index position 100:

[root@ip-10-0-0-143 folder1]# jq ".[100:110] | .[].name | length" strikes.json
6
6
6
13
8
9
6
7
6
6
[root@ip-10-0-0-143 folder1]#

#To see how many key:value pairs are in the first object in the array, we type this command:
jq ".[0] | length" strikes.json
[root@ip-10-0-0-143 folder1]# jq ".[0]" strikes.json
{
  "name": "Aachen",
  "id": "1",
  "nametype": "Valid",
  "recclass": "L5",
  "mass": "21",
  "fall": "Fell",
  "year": "1880-01-01T00:00:00.000",
  "reclat": "50.775000",
  "reclong": "6.083330",
  "geolocation": {
    "type": "Point",
    "coordinates": [
      6.08333,
      50.775
    ]
  }
}
[root@ip-10-0-0-143 folder1]# jq ".[0] | length" strikes.json
10

#
------------------------------------------------------------------------------------------------
The keys Function:::---------


https://www.howtogeek.com/529219/how-to-parse-json-files-on-the-linux-command-line-with-jq/

